/*
async function Split(originalFilePath, partSize = 25165824) {
  const fileSize = fs.statSync(originalFilePath).size;
  const readStream = fs.createReadStream(originalFilePath);
  let partNum = 0;
  let DiscordLink = [];
  let fileSplitNames = [];
  let timeUploaded = null;

  console.log("Splitting file");
  for await (const chunk of readStream) {
    if (partNum * partSize >= fileSize) {
      break;
    }
    const partPath = `${originalFilePath}-${++partNum}.txt`;
    console.log("partPath: ", partPath);
    await fs.promises.writeFile(partPath, chunk);
    console.log(`Writing part ${partNum}`);

    const fileURL = await uploadToDiscord(partPath, CHANNEL_ID);
    DiscordLink.push(fileURL);
    fileSplitNames.push(partPath);
    if (!timeUploaded) {
        const now = new Date();
        const hours = now.getHours();
        const minutes = now.getMinutes().toString().padStart(2, '0');
        const ampm = hours >= 12 ? 'PM' : 'AM';
        const hourIn12 = hours % 12 || 12; // Convert 24h to 12h format
        const month = (now.getMonth() + 1).toString().padStart(2, '0'); // JS months are 0-indexed
        const day = now.getDate().toString().padStart(2, '0');
        const year = now.getFullYear();
        timeUploaded = `${hourIn12}:${minutes} ${ampm} ${month}/${day}/${year}`;
    }
    
  }

  console.log(`File has been split into ${partNum} parts.`);
  await fs.promises.unlink(originalFilePath);
  console.log(`Original file ${originalFilePath} has been deleted.`);

  insertFileData(path.basename(originalFilePath), timeUploaded, fileSize, DiscordLink, partNum, fileSplitNames);
}
*/